一、根证书

1.1生成一个使用RSA编码的密钥信息，而生成的文件保存到 /opt/soft/cas/cers/cakey.pem 目录下，该密钥的长度为2048个字节
openssl genrsa -out /opt/soft/cas/cers/cakey.pem 2048 RSA
1.2 生成根证书的签发申请：在证书访问的时候必须以域名的形式出现（不要使用IP),这个域名是自己的，如果需要本机模拟，则需要通过windows下的hosts
进行修改。/opt/soft/cas/cers目录下会生成一个cakey.pem文件
openssl req -new -key /opt/soft/cas/cers/cakey.pem -out /opt/soft/cas/cers/cacert.csr -subj /CN=cas.com
1.3 生成根证书的签发申请，此签发证书有效时间为10年。
openssl x509 -req -days 3650 -sha1 -extensions v3_ca -signkey /opt/soft/cas/cers/cakey.pem -in /opt/soft/cas/cers/cacert.csr -out /opt/soft/cas/cers/ca.cer

二、服务器端证书
2.1 生成服务器私钥,生成私钥的时候需要设置一个密码，密码为david
openssl genrsa -aes256 -out /opt/soft/cas/cers/server/server-key.pem 2048
2.2 生成服务器端证书签发申请，创建的时候依然需要输入之前生成服务器私钥的密码，即davidjava
openssl req -new -key /opt/soft/cas/cers/server/server-key.pem -out /opt/soft/cas/cers/server/server.csr -subj /CN=cas.com
2.3生成服务器端证书签发申请，有效期10年
openssl x509 -req -days 3650 -sha1 -extensions v3_req -CA /opt/soft/cas/cers/ca.cer -CAkey /opt/soft/cas/cers/cakey.pem -CAserial /opt/soft/cas/cers/server/ca.srl -CAcreateserial -in /opt/soft/cas/cers/server/server.csr -out /opt/soft/cas/cers/server/server.cer

三、客户端证书
3.1生成客户端私钥，生成的时候输入密码：david
openssl genrsa -aes256 -out /opt/soft/cas/cers/client/client-key.pem 2048
3.2 生成客户端证书签发申请,输入密码：david
openssl req -new -key /opt/soft/cas/cers/client/client-key.pem -out /opt/soft/cas/cers/client/client.csr -subj /CN=cas.com
3.3生成客户端证书签发申请，有效期1年
openssl x509 -req -days 365 -sha1 -CA /opt/soft/cas/cers/ca.cer -CAkey /opt/soft/cas/cers/cakey.pem -CAserial /opt/soft/cas/cers/server/ca.srl -in /opt/soft/cas/cers/client/client.csr -out /opt/soft/cas/cers/client/client.cer
注意：以上操作的证书仅仅只针对 ”cas.com“有效。

四、生成Java证书
openssl生成的数字证书和私钥，如果要想在java的环境下使用，需要将其转换为"PKCS#12"的编码格式密钥文件才可以被java的keytool工具所管理。
4.1 生成客户端证书，客户端证书随后需要发送给客户端浏览器的
openssl pkcs12 -export -clcerts -name cas-client -inkey /opt/soft/cas/cers/client/client-key.pem -in /opt/soft/cas/cers/client/client.cer -out /opt/soft/cas/cers/client/client.p12
4.2 生成服务器端证书，主要是由Tomcat使用
openssl pkcs12 -export -clcerts -name cas-server -inkey /opt/soft/cas/cers/server/server-key.pem -in /opt/soft/cas/cers/server/server.cer -out /opt/soft/cas/cers/server/server.p12
4.3 将生成的服务器端的证书导入到本机的受信任证书中
keytool -importcert -trustcacerts -alias cas.com -file /opt/soft/cas/cers/ca.cer -keystore /opt/soft/apache-tomcat-7.0.67/ca-trust.p12
查看导入的证书
keytool -list -keystore /opt/soft/cas/cers/client/client.p12 -storetype pkcs12 -v

tomcat https访问配置证书：
单向认证：所谓单向认证指的是只是在服务器端提供有一个公共证书，所有客户端连接之后都可以获得这个公钥，加密后，服务器端可以利用我们的私钥进行解密处理，这是一种比较常用的处理办法
<Connector 	port="443" protocol="HTTP/1.1" maxThreads="150" SSLEnabled="true" 	scheme="https" secure="true"  clientAuth="false" sslProtocol="TLS"   keystoreFile="/opt/soft/cas/cers/server/server.p12"   keystoreType="pkcs12"  keystorePass="davidjava" />
双向认证
<Connector port="443" protocol="HTTP/1.1"  
 maxThreads="150" SSLEnabled="true" 
 scheme="https" secure="true"  
 clientAuth="true" sslProtocol="TLS"   
 keystoreFile="/opt/soft/cas/cers/server/server.p12"  
 keystoreType="pkcs12"  
 keystorePass="davidjava"  
 truststoreFile="/usr/local/tomcat/ca-trust.p12"
 truststoreType="jks"
 truststorePass="davidjava"/>

